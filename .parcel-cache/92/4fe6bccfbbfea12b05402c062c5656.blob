var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _View = require('./View');
var _urlImgIconsSvg = require('url:../img/icons.svg');
var _urlImgIconsSvgDefault = _parcelHelpers.interopDefault(_urlImgIconsSvg);
class PaginationView extends _View.View {
  _parentElement = document.querySelector('.pagination');
  _addClickHandler(handler) {
    this._parentElement.addEventListener('click', function (e) {
      const btn = e.target.closest('.btn--inline');
      if (!btn) return;
      const goToPage = +btn.dataset.goto;
      console.log(goToPage);
      handler(goToPage);
    });
  }
  getNextBtn() {
    return `
    <button data-goto="${curPage + 1}" class="btn--inline pagination__btn--next">
           <span>${curPage + 1}</span>
           <svg class="search__icon">
             <use href="${_urlImgIconsSvgDefault.default}#icon-arrow-right"></use>
           </svg>
         </button>
    `;
  }
  getPrevBtn() {
    return `
    <button data-goto="${curPage - 1}" class="btn--inline pagination__btn--prev">
           <span>${curPage - 1}</span>
           <svg class="search__icon">
             <use href="${_urlImgIconsSvgDefault.default}#icon-arrow-right"></use>
           </svg>
         </button>
    `;
  }
  _generateMarkup() {
    const curPage = this._data.page;
    console.log(this._data);
    const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);
    console.log(numPages);
    // Page 1 and there other pages
    if (curPage === 1 && numPages > 1) {
      // return `
      // <button data-goto="${
      // curPage + 1
      // }" class="btn--inline pagination__btn--next">
      // <span>${curPage + 1}</span>
      // <svg class="search__icon">
      // <use href="${icons}#icon-arrow-right"></use>
      // </svg>
      // </button>
      // `;
      this.getNextBtn();
    }
    // Last page
    if (curPage === numPages && numPages > 1) {
      // return `
      // <button data-goto="${
      // curPage - 1
      // }" class="btn--inline pagination__btn--prev">
      // <svg class="search__icon">
      // <use href="${icons}#icon-arrow-left"></use>
      // </svg>
      // <span>${curPage - 1}</span>
      // </button>`;
      this.getPrevBtn();
    }
    // Other page
    if (curPage < numPages) {
      // return `
      // <button data-goto="${
      // curPage - 1
      // }" class="btn--inline pagination__btn--prev">
      // <svg class="search__icon">
      // <use href="${icons}#icon-arrow-left"></use>
      // </svg>
      // <span>${curPage - 1}</span>
      // </button>
      // <button data-goto="${
      // curPage + 1
      // }" class="btn--inline pagination__btn--next">
      // <span>${curPage + 1}</span>
      // <svg class="search__icon">
      // <use href="${icons}#icon-arrow-right"></use>
      // </svg>
      // </button>
      // `;
      this.getPrevBtn();
      this.getNextBtn();
    }
    // Page 1 and there are no other pages
    return ``;
  }
}
exports.default = new PaginationView();
