var _modelJs = require('./model.js');
var _viewsRecipeViewJs = require('../views/recipeView.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _viewsRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsRecipeViewJs);
var _viewsSearchView = require('../views/searchView');
var _viewsSearchViewDefault = _parcelHelpers.interopDefault(_viewsSearchView);
var _viewsResultsViewJs = require('../views/resultsView.js');
var _viewsResultsViewJsDefault = _parcelHelpers.interopDefault(_viewsResultsViewJs);
var _viewsBookmarksViewJs = require('../views/bookmarksView.js');
var _viewsBookmarksViewJsDefault = _parcelHelpers.interopDefault(_viewsBookmarksViewJs);
var _viewsPaginationViewJs = require('../views/paginationView.js');
var _viewsPaginationViewJsDefault = _parcelHelpers.interopDefault(_viewsPaginationViewJs);
var _viewsAddRecipeViewJs = require('../views/addRecipeView.js');
var _viewsAddRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsAddRecipeViewJs);
var _configJs = require('./config.js');
require('core-js/stable');
require('regenerator-runtime/runtime');
// if (module.hot) {
// module.hot.accept();
// }
const getRecipe = async function () {
  const id = window.location.hash.slice(1);
  if (!id) return;
  try {
    _viewsRecipeViewJsDefault.default.renderSpinner();
    _viewsResultsViewJsDefault.default.update(_modelJs.getSearchResultsPage());
    // Loading the recipe
    await _modelJs.loadRecipe(id);
    // Rendering the recipe
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
    // Update the bookmarks
    _viewsBookmarksViewJsDefault.default.update(_modelJs.state.bookmarks);
  } catch (err) {
    _viewsRecipeViewJsDefault.default.renderError();
  }
};
const controlSearchResults = async function () {
  try {
    _viewsResultsViewJsDefault.default.renderSpinner();
    // Get query from search view
    const query = _viewsSearchViewDefault.default.getQuery();
    if (!query) return;
    // search results
    await _modelJs.loadSearchResults(query);
    // Load results
    _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage());
    // Render pagination
    _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
  } catch (err) {
    console.log(err);
  }
};
const controlPagination = function (newPage) {
  // Load NEW results
  _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(newPage));
  // Render NEW pagination
  _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = function (servings) {
  // Update recipe servings
  _modelJs.updateServings(servings);
  // Update the view
  _viewsRecipeViewJsDefault.default.update(_modelJs.state.recipe);
};
const controlBookmarks = function () {
  // Add bookmark
  if (!_modelJs.state.recipe.bookmarked) {
    _modelJs.addBookmark(_modelJs.state.recipe);
  } else {
    _modelJs.deleteBookmark(_modelJs.state.recipe.id);
  }
  // Update recipe view
  _viewsRecipeViewJsDefault.default.update(_modelJs.state.recipe);
  // add bookmark to bookmark list
  _viewsBookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
  // Put bookmarks in local storage
  _viewsBookmarksViewJsDefault.default.addHandlerRender(_modelJs.state.bookmarks);
};
const bookmarkStorage = function () {
  _viewsBookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlAddRecipe = async function (newRecipe) {
  try {
    await _modelJs.uploadNewRecipe(newRecipe);
    // Render new recipe
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
    // Success message
    _viewsAddRecipeViewJsDefault.default.renderSuccessMessage();
    // Close form window
    setTimeout(function () {
      console.log('works');
      _viewsAddRecipeViewJsDefault.default.toggleWindow();
    }, _configJs.CLOSE_MODAL_SEC * 1000);
  } catch (err) {
    _viewsAddRecipeViewJsDefault.default.renderError(err.message);
  }
};
const init = function () {
  _viewsBookmarksViewJsDefault.default.addHandlerRender(bookmarkStorage);
  _viewsRecipeViewJsDefault.default.addHandlerRender(getRecipe);
  _viewsRecipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
  _viewsRecipeViewJsDefault.default.addHandlerAddBookmark(controlBookmarks);
  _viewsSearchViewDefault.default.addHandlerSearch(controlSearchResults);
  _viewsPaginationViewJsDefault.default._addClickHandler(controlPagination);
  _viewsAddRecipeViewJsDefault.default.addHandlerUpload(controlAddRecipe);
};
init();
