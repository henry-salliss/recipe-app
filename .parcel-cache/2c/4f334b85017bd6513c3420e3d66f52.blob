var _modelJs = require('./model.js');
var _viewsRecipeViewJs = require('../views/recipeView.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _viewsRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsRecipeViewJs);
var _viewsSearchView = require('../views/searchView');
var _viewsSearchViewDefault = _parcelHelpers.interopDefault(_viewsSearchView);
var _viewsResultsViewJs = require('../views/resultsView.js');
var _viewsResultsViewJsDefault = _parcelHelpers.interopDefault(_viewsResultsViewJs);
var _viewsBookmarksViewJs = require('../views/bookmarksView.js');
var _viewsBookmarksViewJsDefault = _parcelHelpers.interopDefault(_viewsBookmarksViewJs);
var _viewsPaginationViewJs = require('../views/paginationView.js');
var _viewsPaginationViewJsDefault = _parcelHelpers.interopDefault(_viewsPaginationViewJs);
var _viewsAddRecipeViewJs = require('../views/addRecipeView.js');
var _viewsAddRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsAddRecipeViewJs);
require('./config.js');
require('core-js/stable');
require('regenerator-runtime/runtime');
// // if (module.hot) {
// //   module.hot.accept();
// // }
// const getRecipe = async function () {
// try {
// const id = window.location.hash.slice(1);
// console.log(id + 'ðŸ¤‘');
// if (!id) return;
// recipeView.renderSpinner();
// resultsView.update(model.getSearchResultsPage());
// // Loading the recipe
// await model.loadRecipe(id);
// // Rendering the recipe
// recipeView.render(model.state.recipe);
// // Update the bookmarks
// bookmarksView.update(model.state.bookmarks);
// } catch (err) {
// recipeView.renderError();
// }
// };
// const controlSearchResults = async function () {
// try {
// resultsView.renderSpinner();
// // Get query from search view
// const query = searchView.getQuery();
// if (!query) return;
// // search results
// await model.loadSearchResults(query);
// // Load results
// resultsView.render(model.getSearchResultsPage());
// // Render pagination
// paginationView.render(model.state.search);
// } catch (err) {
// console.log(err);
// }
// };
// const controlPagination = function (newPage) {
// // Load NEW results
// resultsView.render(model.getSearchResultsPage(newPage));
// // Render NEW pagination
// paginationView.render(model.state.search);
// };
// const controlServings = function (servings) {
// // Update recipe servings
// model.updateServings(servings);
// // Update the view
// recipeView.update(model.state.recipe);
// };
// const controlBookmarks = function () {
// // Add bookmark
// if (!model.state.recipe.bookmarked) {
// model.addBookmark(model.state.recipe);
// // Delete bookmark
// } else {
// model.deleteBookmark(model.state.recipe.id);
// }
// // Update recipe view
// recipeView.update(model.state.recipe);
// // add bookmark to bookmark list
// bookmarksView.render(model.state.bookmarks);
// // Put bookmarks in local storage
// bookmarksView.addHandlerRender(model.state.bookmarks);
// };
// const bookmarkStorage = function () {
// bookmarksView.render(model.state.bookmarks);
// };
// const controlAddRecipe = async function (newRecipe) {
// try {
// // Add loading spinner
// addRecipeView.renderSpinner();
// // Upload new data
// await model.uploadNewRecipe(newRecipe);
// console.log(model.state.recipe);
// // Render new recipe
// recipeView.render(model.state.recipe);
// // Success message
// addRecipeView.renderSuccessMessage();
// // Rerender the bookmark view
// bookmarksView.render(model.state.recipe);
// // Close form window
// setTimeout(function () {
// addRecipeView.toggleWindow();
// }, CLOSE_MODAL_SEC * 1000);
// } catch (err) {
// addRecipeView.renderError(err.message);
// }
// };
// const init = function () {
// bookmarksView.addHandlerRender(bookmarkStorage);
// recipeView.addHandlerRender(getRecipe);
// recipeView.addHandlerUpdateServings(controlServings);
// recipeView.addHandlerAddBookmark(controlBookmarks);
// searchView.addHandlerSearch(controlSearchResults);
// paginationView._addClickHandler(controlPagination);
// addRecipeView.addHandlerUpload(controlAddRecipe);
// };
// init();
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    _viewsRecipeViewJsDefault.default.renderSpinner();
    // 0) Update results view to mark selected search result
    _viewsResultsViewJsDefault.default.update(_modelJs.getSearchResultsPage());
    // 1) Updating bookmarks view
    _viewsBookmarksViewJsDefault.default.update(_modelJs.state.bookmarks);
    // 2) Loading recipe
    await _modelJs.loadRecipe(id);
    // 3) Rendering recipe
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
  } catch (err) {
    _viewsRecipeViewJsDefault.default.renderError();
    console.error(err);
  }
};
const controlSearchResults = async function () {
  try {
    _viewsResultsViewJsDefault.default.renderSpinner();
    // 1) Get search query
    const query = _viewsSearchViewDefault.default.getQuery();
    if (!query) return;
    // 2) Load search results
    await _modelJs.loadSearchResults(query);
    // 3) Render results
    _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage());
    // 4) Render initial pagination buttons
    _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
  } catch (err) {
    console.log(err);
  }
};
const controlPagination = function (goToPage) {
  // 1) Render NEW results
  _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
  // 2) Render NEW pagination buttons
  _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = function (newServings) {
  // Update the recipe servings (in state)
  _modelJs.updateServings(newServings);
  // Update the recipe view
  _viewsRecipeViewJsDefault.default.update(_modelJs.state.recipe);
};
const controlAddBookmark = function () {
  // 1) Add/remove bookmark
  if (!_modelJs.state.recipe.bookmarked) _modelJs.addBookmark(_modelJs.state.recipe); else _modelJs.deleteBookmark(_modelJs.state.recipe.id);
  // 2) Update recipe view
  _viewsRecipeViewJsDefault.default.update(_modelJs.state.recipe);
  // 3) Render bookmarks
  _viewsBookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlBookmarks = function () {
  _viewsBookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlAddRecipe = async function (newRecipe) {
  try {
    // Show loading spinner
    _viewsAddRecipeViewJsDefault.default.renderSpinner();
    // Upload the new recipe data
    await _modelJs.uploadRecipe(newRecipe);
    console.log(_modelJs.state.recipe);
    // Render recipe
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
    // Success message
    _viewsAddRecipeViewJsDefault.default.renderMessage();
    // Render bookmark view
    _viewsBookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
    // Change ID in URL
    window.history.pushState(null, '', `#${_modelJs.state.recipe.id}`);
    // Close form window
    setTimeout(function () {
      _viewsAddRecipeViewJsDefault.default.toggleWindow();
    }, MODAL_CLOSE_SEC * 1000);
  } catch (err) {
    console.error('ðŸ’¥', err);
    _viewsAddRecipeViewJsDefault.default.renderError(err.message);
  }
};
const init = function () {
  _viewsBookmarksViewJsDefault.default.addHandlerRender(controlBookmarks);
  _viewsRecipeViewJsDefault.default.addHandlerRender(controlRecipes);
  _viewsRecipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
  _viewsRecipeViewJsDefault.default.addHandlerAddBookmark(controlAddBookmark);
  _viewsSearchViewDefault.default.addHandlerSearch(controlSearchResults);
  _viewsPaginationViewJsDefault.default.addHandlerClick(controlPagination);
  _viewsAddRecipeViewJsDefault.default.addHandlerUpload(controlAddRecipe);
};
init();
