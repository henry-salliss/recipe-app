var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "View", function () {
  return View;
});
var _imgIconsSvg = require('../img/icons.svg');
var _imgIconsSvgDefault = _parcelHelpers.interopDefault(_imgIconsSvg);
class View {
  _data;
  /**
  * Render the object taken to the DOM
  * @param {Object || Object[]} data The data that gets rendered e.g: recipe
  * @param {boolean [render=true]} render If false a string is created, if true recipe is rendered
  * @returns {undefined} if render is false string is returned
  * @this {Object} is an instance of View
  * @author Henry Salliss
  * @todo Finish function
  */
  render(data, render = true) {
    if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
    this._data = data;
    const html = this._generateMarkup();
    if (!render) return html;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', html);
  }
  update(data) {
    this._data = data;
    const newHtml = this._generateMarkup();
    const newDOM = document.createRange().createContextualFragment(newHtml);
    const newElements = Array.from(newDOM.querySelectorAll('*'));
    const currentElements = Array.from(this._parentElement.querySelectorAll('*'));
    newElements.forEach((newEl, i) => {
      const curEl = currentElements[i];
      // Changes text
      if (!newEl.isEqualNode(curEl) && newEl.firstChild?.nodeValue?.trim?.() !== '') {
        curEl.textContent = newEl.textContent;
      }
      // Changes attributes
      if (!newEl.isEqualNode(curEl)) {
        Array.from(newEl.attributes).forEach(attr => {
          curEl.setAttribute(attr.name, attr.value);
        });
      }
    });
  }
  _clear() {
    this._parentElement.innerHTML = '';
  }
  renderSpinner() {
    const spinner = `<div class="spinner">
        <svg>
          <use href="${_imgIconsSvgDefault.default}#icon-loader"></use>
        </svg>
        </div>`;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', spinner);
  }
  renderError(error = this._errorMessage) {
    const html = `
        <div class="error">
            <div>
              <svg>
                <use href="${_imgIconsSvgDefault.default}#icon-alert-triangle"></use>
              </svg>
            </div>
            <p>${error}</p>
          </div>
        `;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', html);
  }
  renderSuccessMessage(message = this._message) {
    const html = `
        <div class="error">
            <div>
              <svg>
                <use href="${_imgIconsSvgDefault.default}#icon-smile"></use>
              </svg>
            </div>
            <p>${message}</p>
          </div>
        `;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', html);
  }
}
